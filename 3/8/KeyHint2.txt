- Seja DiferencaMinimaBiparticoes(n,S,d) a função que retorna Verdadeiro se 
  existe uma bipartição dos elementos S[1..n] cuja diferença da soma dos 
  elementos da primeira parte com a soma dos elementos da segunda parte 
  for exatamente d.

- Considere que sejam dados os valores x e y correspondendo a:
  . x = Verdadeiro se existe uma bipartição dos elementos S[1..n-1] cuja 
  diferença da soma dos elementos da primeira parte com a soma dos elementos 
  da segunda parte for exatamente d-S[n].
  . y = Verdadeiro se existe uma bipartição dos elementos S[1..n-1] cuja 
  diferença da soma dos elementos da primeira parte com a soma dos elementos 
  da segunda parte for exatamente d+S[n].
  A recursão pode lhe ajudar a obter tais valores.

- Note que, existe uma bipartição dos elementos S[1..n] cuja diferença da soma 
  dos elementos da primeira parte com a soma dos elementos da segunda parte 
  for exatamente d se:
  . existe uma bipartição dos elementos S[1..n-1] cuja diferença da soma dos 
    elementos da primeira parte com a soma dos elementos da segunda parte for 
    exatamente d-S[n]. Nesse caso, ao introduzir S[n] nessa primeira parte, 
    a nova diferença passa a ser exatamente d.
  . existe uma bipartição dos elementos S[1..n-1] cuja diferença da soma dos 
    elementos da primeira parte com a soma dos elementos da segunda parte for 
    exatamente d+S[n]. Nesse caso, ao introduzir S[n] nessa segunda parte, a 
    nova diferença passa a ser exatamente d.

  Portanto, DiferencaMinimaBiparticoes(n,S,d) = x ou y.

- O caso em que n = 0 deve ser tratado separadamente.

- Ao obter a recursão acima, atente para o fato de haver subproblemas
  repetidos; se for o caso, implemente a técnica de programação dinâmica.
  Empregue uma matriz Mem[0..n][-max_j..max_j] para armazenar as saídas, 
  onde Mem[i][j] armazenará o valor DiferencaMinimaBiparticoes(i,S,j).

- Em C/C++, não é possível usar índices negativos. Uma técnica para contornar
  isso é a seguinte:
  para representar um vetor V1[-a..b], podemos usar o vetor V2[0..a+b] de 
  tal forma que o elemento V1[i] estará armazenado em V2[i+a].

- Note que preencher a matriz Mem de cima para baixo, da esquerda para a 
  direita, é uma ordem adequada para a programação dinâmica.

- O problema original pede a menor diferença em módulo. Após preencher a 
  matriz Mem, a resposta do problema corresponde a obter o menor valor de
  j para o qual Mem[n][j] é Verdadeiro.