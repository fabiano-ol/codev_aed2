- Seja DistEdicao(A, n, B, m) a função que retorna a distância de edição 
  entre as cadeias A[0..n-1] e B[0..m-1].

- Suponha que os últimos caracteres de A e B são os mesmos (isto é, 
  A[n-1]=B[m-1]). Considere que seja dado o valor x correspondendo à distância 
  de edição entre A[0..n-2] e B[0..m-2]. A recursão pode lhe ajudar a obter 
  x.

  Como obter a distância de edição considerando o valor x neste caso?

  Note que DistEdicao(A, n, B, m) é igual à distância de edição de A[0..n-2] 
  e B[0..m-2], pois os últimos caracteres são iguais. 

- Suponha que os últimos caracteres de A e B não são os mesmos. Considere que 
  sejam dados os valores x correspondendo à distância de edição entre A[0..n-2]
  e B[0..m-2], y correspondendo à distância de edição entre A[0..n-2]
  e B[0..m-1] e z correspondendo à distância de edição entre A[0..n-1]
  e B[0..m-2]. A recursão pode lhe ajudar a obter tais x, y e z.

  Como obter a distância de edição considerando os valores x, y e z neste caso?

  Note que DistEdicao(A, n, B, m) pode ser obtida por 3 diferentes maneiras:
  
  . Substituindo A[n-1] por B[m-1]: Neste caso, 
    DistEdicao(A, n, B, m) = DistEdicao(A, n-1, B, m-1) + 1.
  . Inserindo B[m-1]: Neste caso, 
    DistEdicao(A, n, B, m) = DistEdicao(A, n-1, B, m-2) + 1.
  . Deletando A[n-1]: Neste caso, 
    DistEdicao(A, n, B, m) = DistEdicao(A, n-2, B, m-1) + 1.

  Portanto, DistEdicao(A, n, B, m) deve ser escolhido como o menor valor entre
  os três acima.

- Os casos em que n=0 ou m=0 devem ser tratados separadamente.

- Ao obter a recursão acima, atente para o fato de haver subproblemas
  repetidos; se for o caso, implemente a técnica de programação dinâmica.
  Empregue um vetor Mem[0..n][0..m] para armazenar as saídas, onde Mem[i][j]
  corresponde à distância de edição de A[0..i-1] e B[0..j-1].

- Note que preencher o vetor Mem[i][j], com i variando de 0 até n, e j
  variando entre 0 até m, é uma ordem adequada para a programação dinâmica. 