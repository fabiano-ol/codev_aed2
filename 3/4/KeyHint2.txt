- Seja JogoPalito(n,j) a função que retorna qual deve ser a quantidade 
  de palitos da estratégia vencedora do jogador j havendo n palitos
  na mesa.

- Considere que sejam dados os valores 
  x1 = JogoPalito(n-1,3-j),
  x2 = JogoPalito(n-2,3-j),
  x3 = JogoPalito(n-3,3-j),
  correspondendo às melhores jogadas que o outro jogador (3-j) possui
  havendo, respectivamente, n-1, n-2 ou n-3 palitos. A recursão pode lhe 
  ajudar a obter tais valores x1, x2 e x3.

- Note que JogoPalito(n, j) = -1 se x1, x2 e x3 forem todos diferentes 
  de -1. Caso contrário, JogoPalito(n, j) = 1 se x1 = -1, ou 
  JogoPalito(n, j) = 2 se x2 = -1, ou JogoPalito(n, j) = 3 se x3 = -1.

- O caso em que n=0 deve ser tratado separadamente.

- Ao obter a recursão acima, atente para o fato de haver subproblemas
  repetidos; se for o caso, implemente a técnica de programação dinâmica.
  Empregue um vetor M[0..n][1..2] para armazenar as saídas, onde M[i][j] 
  armazenará o valor de JogoPalito(i, j).

- Note que preencher o vetor M[i][j], com i variando de 0 até n, e j
  variando entre 1 e 2, é uma ordem adequada para a programação dinâmica. 